#cloud-config
# Add groups to the system
# and the empty group ghost-mgr.
groups:
  - ghost-mgr

# Add users to the system. Users are added after groups are added.
users:
  - default
  - name: ghost-mgr
    gecos: Ghost Admin
    shell: /bin/bash
    primary_group: ghost-mgr
    sudo: ALL=(ALL) NOPASSWD:ALL
    lock_passwd: false
    ssh_authorized_keys:
      - ${ghost_admin_ssh_public_key}

# Update package lists
package_update: true

# Update installed packages
package_upgrade: true

# Downloads the golang package
packages:
  - net-tools
  - zip
  - tree
  - nginx
  - certbot 
  - python3-certbot
  - mysql-server
  - pwgen

write_files:
- path: /root/.ghost.sh_generated_passwords
  content: |
    # ghost.sh generated passwords for the MySQL user and the Ghost Admin user
    ghost_mysql_password=${ghost_mysql_password}
    ghost_admin_password=${ghost_admin_password}
  permissions: '0400'
  owner: root:root
- path: /run/01_ghost-mysql-dba.sql
  content: |
    # mysql dba user credentials for ghost
    CREATE DATABASE ghost_production;

    CREATE USER 'ghost'@'localhost' IDENTIFIED WITH mysql_native_password BY '${ghost_mysql_password}';  
    GRANT ALL PRIVILEGES ON ghost_production.* TO 'ghost'@'localhost';
    FLUSH PRIVILEGES;
    quit
  permissions: '0400'
  owner: root:root
- path: /run/02_ghost-config-setup.sh
  content: |
    # ghost.sh script to setup the configuration file for Ghost

    #instance_public_ip=$(curl -s http://checkip.amazonaws.com)
    instance_public_ip=${ghost_elastic_ip}
    ghost_blog_domain=${ghost_blog_domain}
    ghost_blog_ip=""

    function convertIP2domain() {
        # This will convert  19.70.1.1 to ghost-sh-19-70-1-1.nip.io.
        local domain=$(echo "$1" | sed 's/\./-/g')

        # Add the prefix and suffix to the domain
        domain="ghost-sh-$domain.nip.io"

        echo "$domain"
    }

    # Check if the a valid domain was specified
    if [[ -n "$ghost_blog_domain" ]]; then

        # Run nslookup and store the output in a variable
        output=$(nslookup $ghost_blog_domain | sed -n '3,6p')

        # Extract the IP address using grep and awk
        ghost_blog_ip=$(echo "$output" | grep "Address:" | awk '{print $2}')

        
        if [[ "$ghost_blog_ip" = "$instance_public_ip" ]]; then
            echo "The DNS A-record for domain $ghost_blog_domain correctly resolves to the IP of this server: $instance_public_ip."
        else
            echo "The DNS A-record for domain $ghost_blog_domain does not resolve to the IP of this server: $instance_public_ip."
            echo "Will use nip.io to 'create' a domain based on the server's public IP: $instance_public_ip."
            ghost_blog_domain=$(convertIP2domain $instance_public_ip)
        fi

    else
        echo "No domain was specified. Will use nip.io to 'create' a domain based on the server's public IP: $instance_public_ip."
        ghost_blog_domain=$(convertIP2domain $instance_public_ip)
    fi
    
    cd /var/www/ghost && ghost config --url $ghost_blog_domain --ip 127.0.0.1 --port 2368 --log "stdout" --log "file" --db mysql --dbhost localhost --dbname ghost_production --dbuser ghost --dbpass ${ghost_mysql_password}
  permissions: '0750'
  owner: root:root
- path: /run/03_ghost-admin-setup.sh
  content: |
    # ghost.sh script to automate setting a secure password for the Ghost Admin user

    curl -s 'http://localhost:2368/ghost/api/admin/authentication/setup/' \
    -X 'POST' \
    -H 'Content-Type: application/json; charset=UTF-8' \
    -H 'Accept: application/json, text/javascript, */*; q=0.01' \
    -H 'Host: localhost:2368' \
    -H 'Origin: http://localhost:2368' \
    -H 'Referer: http://localhost:2368/ghost/' \
    -H 'Connection: keep-alive' \
    -H 'X-Requested-With: XMLHttpRequest' \
    -H 'App-Pragma: no-cache' \
    --data-binary '{"setup":[{"name":"Ghost Admin","email":"${ghost_admin_email}","password":"${ghost_admin_password}","blogTitle":"${ghost_blog_name}"}]}'
  permissions: '0750'
  owner: root:root



# Check that all dependencies are present
runcmd:
  # Add the NodeSource APT repository for Node 16
  - curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash
  - apt install nodejs -y 
  - npm install ghost-cli@latest -g
  - mkdir -p /var/www/ghost
  - chown ghost-mgr:ghost-mgr /var/www/ghost
  - chmod 775 /var/www/ghost

  - mkdir -p /home/ghost-mgr/tmp
  - cp /run/0[1-3]_ghost*.* /home/ghost-mgr/tmp
  - chown -R ghost-mgr:ghost-mgr /home/ghost-mgr/tmp/
  - [su, ghost-mgr, -c, "cd /var/www/ghost && ghost install --no-setup"]
  
  # mysql config
  - mysql < /home/ghost-mgr/tmp/01_ghost-mysql-dba.sql > /home/ghost-mgr/tmp/01_ghost-mysql-dba.out
  
  # ghost config
  - su ghost-mgr -c "/home/ghost-mgr/tmp/02_ghost-config-setup.sh"
  
  # ghost setup [***TODO SSL cert***]
  - su ghost-mgr -c "cd /var/www/ghost && ghost setup --no-prompt --no-setup-mysql -V"

  # ghost admin password setup
  - su ghost-mgr -c "/home/ghost-mgr/tmp/03_ghost-admin-setup.sh"

  # ghost restart
  - su ghost-mgr -c "cd /var/www/ghost && ghost restart"

  # ghost clean up
  - su ghost-mgr -c "cd /var/www/ghost && ghost buster"
  
  # ghost-mgr account clean up
  - rm -rf /run/0[1-3]_ghost*.*
  - rm -rf /home/ghost-mgr/tmp/0[1-3]_ghost*.*


  # TODO: Write out installed version numbers to a file
  - nginx -v
  - certbot --version
  - mysql --version
  - node --version && npm --version
  - su ghost-mgr -c "ghost --version"
  - su ghost-mgr -c "ghost ls"
